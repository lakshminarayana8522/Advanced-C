Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:
	
	2
	
    1	     3	


Input: root = [2,1,3]
Output: true

Example 2:

		5

	1		4

		3		6


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1




solution



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
bool myFunction(struct TreeNode *root,struct TreeNode *temp1, struct TreeNode *temp2)
{
    bool flag = true;
    
    if(root)
    {
        if(root->left)
        {
            if(root->left->val >= root->val && root->left->val >= temp1->val  ||( (root->val > temp1->val) && (root->left->val <= temp1->val)))
            {
                return false;
            }
            temp1 = root->left;
        }
       if(root->right)
       {
            if((root->right->val <= root->val && root->right->val <= temp2->val) || ((root->val <temp2->val) && (root->right->val >= temp2->val)))
            {
                return false;
            }
           temp2 = root->right;
       }
    
        flag = myFunction(root->left,temp1,temp2);
        if(flag)
        {
            flag = myFunction(root->right,temp1,temp2);
        }
        
    }
    return flag;
}


bool isValidBST(struct TreeNode* root){
    
    bool flag;
    
    flag = myFunction(root,root,root);
    
    return flag;
}